%!PS-Adobe-2.0
%%Creator: dvips(k) 5.94b Copyright 2004 Radical Eye Software
%%Title: D:/Research/ICQNM08 Talk/figures/pstricksTOpdf.dvi
%%CreationDate: Mon Dec 10 02:33:23 2007
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMMI10 CMMI7 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: C:\texmf\MiKTeX\bin\dvips.exe
%+ "D:/Research/ICQNM08 Talk/figures/pstricksTOpdf.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2007.12.10:0233
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.00, 2005/09/18
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust {
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
	/targetLength ED /angle0 ED
	/x0 rx angle0 cos mul def
	/y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
	targetLength 57.2958 mul
	angle0 sin rx mul dup mul
	angle0 cos ry mul dup mul
	add sqrt div
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
	dup 90 ge { pop 90 } if
	angle0 exch d
% maximum number of times to iterate the iterative procedure:
	30
% iterative procedure: takes an angle t on top of stack, computes a better angle (an put it on top of stack)
	{ dup
% compute distance D between (x0,y0) and M(t)
	dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
	dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
	exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
	2 index Div targetLength mul y0 add ry Div exch
	2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
	atan exch pop
	} repeat
% we don't look at what happened... in particular, if targetLength is greater than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
%after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueID 5000793 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B283796A9AD847424B4E6508546C36223A3B17EB82A56592F27FC27
F1D49D5FF4BBC0E16231807AF7E195AA7D0D01C7566243448B222D57B811EAE6
DE9370F84E207DC9BEC731AD6040FD9B804FA14CA264B73136F9AF34390319F6
A543D5D4D7FDDDF2F76651E557683614521110DEC1CCAC426117DDA7D6CF1B8B
7879B21FDC78BAB3C944BCDCD6A65B67F3692F0A8D5E36FB783A63D4FBC9842E
2CBC2720A7206F42A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC58C828491
84A8EBDB90B1167333987F7D42A76E9C5C5A8429E1CACD4206D312E9CA60D7E0
6E906270BD9F42EEE618B7F5CC9ACBE1FCDB7E7C02D756FBDCA1E23E47BCF2C9
6A9C58E53950DB59E43228DF2E17F44D2828175BF383AD06F224BB9C8438B787
B5673AAE3772C82AC0ED80420E4BCD787F6C1979B339E271D9F3A9068D32ACDB
476F04E5FFEACBC97E5C7B8E2229F94F3B360D1F7D0B7CE61AEDAAEF98864CB6
CD1339FB5894E7A3752963AA6043403EF01422549C478F514629E5A25C4FDE51
CB19068F183D547C8A109854E67074DD421CDC878BB48835AF0D965A0FDFD392
847AE57C85675CF04BFD1410B56E616F68C399DAD07C9A198489AA1D0FA3717B
F3CD52E7FC86C8FFE0018FC14ED39CEF35B01BCCC70C3CF719E75F30EC9273AB
A06B032588063AB6F16F8580854D75A77F19581D79F4196EF1714EF7647CCFF0
4600E6E0020CDF9279DAA7957A6A6E23DCAF1E323ED770D92EA30AC2431DEECA
F9F52A48C2E2AD1951D3C888FCCE700948CB1ADD16BEF5E1C3E13A75A0A59C0F
2817D63DE90FD71A3D7718F78EC322B1AA13D1AE21084F831D8AF20F1BA275EF
AE5EE1D3062B381FE219B723694636BECCF3785EDCBC5908BDBFA2B43CA68FB5
2B03ADB9C183CB6668E39153B04A30FF54F0E10321CFA3B633F1FCB2560AD582
DB153772FA61136A0A5EF8DA15527B6BE9977923FCC04A98C20827CF1F6644C6
84B214180DFC821FF250D30F35CA47DF4C4C6CE1A54A63345CF7C56D948C7F72
E1B46BF96835A1BE62AC9410FE0DBAEEDEC46E94C594D494F44BE5BEB40B796A
D36F4FA86F331E4BC14C95C484B3D32C4A7B17865D9B7D0FC9DAFFF25889365D
60708E75BFBA20CACD3A509EABD87C539A4DC4D66D595F9F42DAC347C6403614
E907DECA0184C27DF4CDC435ECAE7B83423198A06BEF117AFA0B674C0286A86D
AD79045008AA31845DE3E825E5AD4052758EF85B6E5E31E9000628D6E1388FAF
B1BABE9909CF3D445B6D0A9397D34FFB85533A0920E41D2C0D07EF9AED15CA34
F3B43C1CEF5FFACA40E72201BCD91896E73A9361BA5FBC217CBD8E02D56ADF0F
5FB8E6690350A30F7A9F75388787D5038D0B1D85BE93B74E2A33BF4DBD0DAB54
62FA74FF80AD1FE16BA663567DF975F79157DF055F88968C5C21A1F8DFE545DC
341D946623481D55F6B4A2CB19AA0F2D357C3F3B60F0AD3622B4CF9A60C84098
532F252DC064E651EAEAE438882DAB4E24A21CB79EDD153B98C816562A713698
1BC1B42DCFA2B9EACD165DADCA72A34E5F912CBA6C9A47EEB37C946A3DEF3BDA
4BE3C212D3FA326C3A98BE2DE8BDEAD6E496CA6CFE48F03E062F02AC5E128CB5
F4D2B45A40293DD3BE38CF8675AC5926034DCD30482C9B5A469321FF89334FB1
2AB0107C1D2F6474BE3CC6C30BB6148806AC350300BC887FE373EA4C24F96BC3
927A5CFCE65CABBF1313AAC5CA70CD7BC6838B8D13C1D9F330FAD4C48CEE4A14
7504C8C48D0794FED86239B627D5AE31A428EB72DCBE961897E8C39AF78930DA
CF858E7092A21FB8D7C62C08219DD2DB207D330FEC4B3F6AA947D21A6FC37E21
E670AF039B40F124BBFB096EE0FBF02D8CEAEB9A10DC97DC4279576FA0FC809A
C528CDF46E18F79C4D199A1C7C48198EB6AE9A4D08B622DE12FB4EF948E79430
17FD9E461AF78298E9360C57AB6D8AFDBF58CD6B7EA09090EC608F6518851719
5BA98C4E8C7C2993DEC1424A445FCEEF1F2CAE3EB4BDA5B6638D122990FE2444
8AB4D208FFD46A80F16C48794761C47AF3CD2D5F98C9E056813469600BC943ED
0A564C97A07BA0BD6FBC853A7CC59C9C92EE90E4BD82332B8BD538932FD01969
2231AD06F8B2147AFF54D3241AB0AD9B330D7D5074DD54176BAFB7DF2A905082
88F2CCE541CE2ADFC78D3276F4733BCF5D930E23444BDF60BDE3F98832E5F590
634B0F16216E1922BEE4422F0554B0875763C78257C6EFB60775AE951E7CE060
4C04CC745A8A94284DCBE365D9C8FD6F228D201439BD0508324C7BAE6E18070C
32B7684F565CFB4C9E04028859A33AF57E45178C83E5B8ABACBA9DA382C4A71A
1FAB6A8BB9B03D764283653359483E33C3611CB4A7A65CA6B6B75D405AFF8D0B
92FF3D748B5B14AF42DF9C6F1413F5D7F8AC8310C1AC7AA8B2153C751FE6D4E6
53F5478C0AF24A5CCBFA4C3AB95775F9A3309FD6D4392EC9ACEBFA050FC25FFA
856A1DC73D3F0E62D753D3B7CCD7A21A1823151AB1B16A2B0652FED6D6461A17
F5D91CCB77F886FFDB251F0059D960DDE699907BBF37F91D26BE22EE58C9E95A
ACC3B815FC9C7590C6FD2FE7C5BAF6EFEC0187992AA96A93CC41D72564AC3FB4
5997D4658CA00D676BC252C7A30F24A8B913AFEAADC93BD76A0536904B03067C
451C80B958F2711105507962B1404CECEFD01B3677B249D204630A07D4BF27BD
32F28F9D96E37FA4BF3F414D6F3CB8E5EAFFBE9DAA8113BB8D39A301A658C663
CFB6C7B9B914A4988EAECDFF8FDB1C819F7C69459D88747762ECC054BAB54DF7
8AE7D38BE5FA97368FE464927412A7B746BE2F931374A93ED3BA97105187E572
C23AFB328B7A8A70FB2EC694FD53A5B422079A7C866ABEA428BECD0FA11C851A
0D8008729231EF27C5D267FD16F8F724CC0909D7EF071544EBD5A712D2878BAC
44D2D062FC4DC99E4C9E3039C7EDA6ACAFAED979266DF9F7D9DC7A2476430E0B
8A6F68BA9B79374DF4B98607C34EE308E3CD7354F285565B93A1B56A8A94B409
A75B1CF818D95F628C366BB53646D60D1EDA5F9B3E0698F1BF0DBF01E77C7B63
7830E0FFE3938D78E1EA1773E0F7B60A90850CAC5B5B5B01EE78C45791FE459E
BF31D142261B72F0379DBA4C8EF37A673398FCF03D46FB9B6C5BE0CDCC6AE291
3C7476BA72B910DB5AE14FC191DFB35B539BB6658D02BEEF0C498C86AFC723BB
3F54578984FA18F548FCCB4D1073D2F37FC25FEAF09C878C7623973D670A639A
F398B35F3D136EF88F1205F12083408392D5270072B5F9B23E8371D10333C719
6B75A712EA35EE6B0FB3BE71A0A3B7DF700C38018098F8A8DE23305FA3868015
C2C544FF4F942DDE39C34B169FC9214D525FC4F78C3940A655D8634CFCDACA11
75BFC03C969DEBE2B7B01BA0DF564FB3F8D937E98F734E47310E2EA050663E16
3A7FF737B0228DD07442ED15B84309DDB5A23B5CE2ADF7D9551B58563EE6E227
74240B9B03A3FC4EA44760118D9B6E61EC7A01BD67288C526BF197EBE63CD485
FF6DCF6E7182D130FBABE29B9436790EE6ED44528F1F4A502A54627BDE5A864F
E5984FD0EF1894E9C2D5434E9D51DE127E591C3935AB946BC7843843B0A6DC12
02CCCD8F2713D3E5517756BF960B7F59B7F7090E4FA7BB5F5F9122757F8E7E09
BCE5F1D2F7DC919EF4F0EA4AE00EFC1D3A9EE777C3846380C9184C456F475792
0136D9D921D25991754A8C4FF74B6228BEB0C5441FD9E3062F4EEFB069EB56F5
F6F8CA0CD4C40CAE96FD73A824E3BEC1CEE657DE9CBC2F1F35B78B538D2BC5BE
C3B9A883A969364663AD4E7F70A67B84F9AE4B45CA3AA506375AB540928B355C
4934611B3CFBDC3A76D6F855505E4E3C3C2832FC6B6FBC22AAD467945B77332F
87C31E4243AB26A933C41D2B94F8E07F69F97B1757B2B2532E96CFE7B7710406
1A46E33CBDA5BD953B59EAEB9CE41C0C6788EBB418767840ADE6DF4CBBEA5FCA
C1CEF30B003F9E7C3BBEA4E1739CF13289C8612B27E01BF46AC6AC9E826FC4FA
1F3C39E0A9246DB5A45328E6604DC55082AACB26CAB4C69688938916A6C8D4D6
04D13EFF0AE8A291D6864B7822FB922D4715CC6D05B8FD0173D7F480C076D8F0
E0F6A410578C61E9D489FF2C57C878D97C3154A4F89E122EC937CCA89D1512F0
F6941417253356ABF30EBFF86CFBC8C819A64AD0AACE7C4AE15AE64D011533A5
94A01BAAC63E6AF37EBB7280AB86B99497A3B9690FA0773FBD4442BF04482DFE
3BD09095B143499CBEA9B453549B313D315DA7CAB0BC29F2AD242A65FD61833C
234D61DA1C8D31F6CB3773C1DEEC529FB2621B1C1F09BE2B2728C933933568CF
6D81CCAF8310B44C21237EB90EF1CE5064183F1CFEB79E571E8B221825E96DDD
1AC8153CBBBA57A420FED47A138063417234636AD2E1E9F337C4DD76A2D032EA
DC900475AA46E686A68A442E86328991F0CC1957EADF75C7100D2A5D154739EA
FFC5091FD1E31351A295B4502C3509447D98545F5963B17744271AA4C328FA59
6418DC47DC992CDD79DEFFB21B092878A25931CFBF292CC31059DED3D0FC55A0
1353FC55EAE4E0C0983DB09FD61162FEB1C9C7FE919AD623E42C6362B1508FBD
66AF67CBC4AE98CE6A5F218199D8BDF23359C63E38EE3B96F30F009101884CDA
1BAA8E4B39C80825EB8F41E01A71236CFA602E966528170D89D4888C82D85FDE
D9ADFFED4F529FF20242CCAAA52FA1F0AA91CA4C29C80BCA8B15E5724FD5B940
175E405649383F323E54C926CE732231DB1A1EC0878212EB8CADFC7BD05373F9
DABA4CD7110B9FFA0625EBEA5BA374BC609ED8E256A44EA77BB189B767129865
02E868217582DE3B235BB57BB09E89BD2E37784B3E2B0FDBDD90F56C09AC659D
066B6AB4CDDE360BBF79BAD4489038FCCA75A7755B7BA8C687710F5D2E3D7F6C
A3C4D13CA8A8E81BEA4736E220F9C8B4127873619187ED3CFD7BD5C24DD0379C
6C76BCC72697FA73EF48985E42E75083CAC0DF6EC019D269021D21C88D4D6AFE
BB66154C84836F2BCCDA4FE2BE4A9F48E91863509BBF686F787A91CDD19155C7
2A2B74BA510626FD01D5DDD442421ADB916BCB08E340AF802455D444CFA2EA83
849558505ACC9D4E84980E227FAEB0FB3312D307224527CC6964782C74C39824
0D2BF649AE4CB16A94027C01FE565AE4C56D3C397FC430A073C5D04CD32C1A99
E6CE24DE9EA8A4B697B9755FE2F95FA4601A03278B314143CC007690E13B0D23
DFEB45F79C4E28343FD31DFC6F5E5A524AF8ACC35F967756042F1E5E48EACC3C
81FBB3B70682EBAAFFEFB2D8CBBB035D6C1A59B1CB754B41FE92DD57F3C437C1
DBF13D833D9402C0FC8A451717037CBEFA6D5B323B8656471BD05D0A1409CE69
AF792229C69165E64AD4319D9294D94B5399272B1A953AA75E8B14593FB12134
6E43A8F3C26A28DD9379B6E6647234416451F4D928F6042863196E1C8D33C9EB
45BB11A18B9FF38F996D42AA0CC165704550180BDE5B163DADB78B2E6B16D5DF
C6A3563A62D60F7B5C052AE56EC26D330031764644F2D06A5D7ED23BCABC2BA5
257ED945264D4CE88363FDE8957589C4EF9B401F5BF79D3082FCAE3FA1A83A00
EA9BDC726B423E13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.1: CMMI7 1.100
%%CreationDate: 1996 Jul 23 07:53:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
readonly def
/FontBBox{0 -250 1171 750}readonly def
/UniqueID 5087382 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962EAC6E3EBFB8AD256A3C654EAAF9A50C51BC6FA90B61B60401C235AFAB7B
B078D20B4B8A6D7F0300CF694E6956FF9C29C84FCC5C9E8890AA56B1BC60E868
DA8488AC4435E6B5CE34EA88E904D5C978514D7E476BF8971D419363125D4811
4D886EDDDCDDA8A6B0FDA5CF0603EA9FA5D4393BEBB26E1AB11C2D74FFA6FEE3
FAFBC6F05B801C1C3276B11080F5023902B56593F3F6B1F37997038F36B9E3AB
76C2E97E1F492D27A8E99F3E947A47166D0D0D063E4E6A9B535DC9F1BED129C5
123775D5D68787A58C93009FD5DA55B19511B95168C83429BD2D878207C39770
012318EA7AA39900C97B9D3859E3D0B04750B8390BF1F1BC29DC22BCAD50ECC6
A3C633D0937A59E859E5185AF9F56704708D5F1C50F78F43DFAC43C4E7DC9413
44CEFE43279AFD3C167C942889A352F2FF806C2FF8B3EB4908D50778AA58CFFC
4D1B14597A06A994ED8414BBE8B26E74D49F6CF54176B7297CDA112A69518050
01337CBA5478EB984CDD22020DAED9CA8311C33FBCC84177F5CE870E709FC608
D28B3A7208EFF72988C136142CE79B4E9C7B3FE588E9824ABC6F04D141E589B3
914A73A42801305439862414F893D5B6C327A7EE2730DEDE6A1597B09C258F05
261BC634F64C9F8477CD51634BA648FC70F659C90DC042C0D6B68CD1DF36D615
24F362B85A58D65A8E6DFD583EF9A79A428F2390A0B5398EEB78F4B5A89D9AD2
A517E0361749554ABD6547072398FFDD863E40501C316F28FDDF8B550FF8D663
9843D0BEA42289F85BD844891DB42EC7C51229D33EE7E83B1290404C799B8E8C
889787CDC0C51802EA1E0C63E6DE20980D3DD206F0536827A2A22C27057C66DA
3747A9956723D3C6911724CA840E0F1D37740C2C588C8237B23BF6F73EF7C355
AF02025EF84A270DD379DC4FE19BC3250074677FF3F0EF7AAB9F7E5F20FAE9F4
8091CA7F6B4193F17DD10786D13AAEE62BF377DBD21C18CF8E508A8EBA67CF86
B6D74CE0F58737CF560D609177C3311624848A3B3C01434F5E2E7100AB3D03C7
A8C15E3BFAE571A3C5A8601028A12DD616F53E64CC98455FCEA2C5243BC57B37
867CF1E5F2CCC020CE735592698413197F8B978B7061A3B5DBDDDDFBB218D451
0C33223E42EBAE014C269F1355A3BF07267A8FFCC80A1C715D1C4742DF0ED85E
4E035CDEC03F7B416ECF5997B34E81A18B06FAB6A330FF1679B21C4E4CD57A61
1065F477C6B5CCB42CDD64DCE96FDE38AC9D903E8E29B892183A56906389A5F0
01D12E81DE13ACD5115E7B326A22F52CDE7BE2D889DF6317501E771FEABA4DC9
E8DD539473301A447B45034F19A33061889E60CA551B75549D77F3B8BBBD78D2
56A4DAC84646A9228E8D80811565C78585745E8C68499B4F755AD50EC877218D
5D8744150891D08A8D39A0656E5FE99EAAD29570057237DDF94F32749E8F8240
1D8B3E5FC14340EF08502880ACFDB5653571D8BB3EAA39B2D42A4BCC33C701D5
03F3BA43002A6E79CCC316A03B62C5E8EB71A2E54B2510FE9CE7E6F8EAA8EB63
F91C39EC00D40513B44F3B2FC4441FE4A5EF76B15D65978FBB67A18B8A2C98B6
3AC4063168AAE8FC486E9838166E3EDBD790DB7222122E61A384F6BCE66EA8FA
D8CA9D043CC345026B1135CA41F284A49C796D357CBD75F0A05C8079D9BBEDE6
3C004E9E9EE67758E38A59FFAA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 81 /Q put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176676ABB71BBD0EE56B4CC492C0652750227CEC4DFCDA7B0412B4C6F5FA
8690069656793138A32A4D92D4FCC8B8EF69B7810DAE5979103E11BC04ED7B7A
BC6C87822CD73DF0D3929C8AF0CFB34F6C519DA85EDDBD911AF0528767E6E87D
C222089F63719775A4A94A57771C03EDE5B601A93B756645FF8053CDFB6B2037
1655FABA5DB8AD21BFCEF10D0ED08F44A00DBC11BB3265042FB1E32022B466B7
E861F5564CE204CF00131282833A187B191B1DCDD52B5B9141F6E2DFABE884CA
92BA4AAFF52A56C867F81484D9B10DF3AAF2B37FCB652BF8916661488EF7A5D0
93CACAE80B1526D7C6897EA3AF102CA193EE46A4BBCB145B00ED9A37050C7C53
AD7CF573C6D6A49439C32513F7B2941C482491A9ED85AD4729DC32EC8C5A1BF8
224CFD0AB1873B55C95D927A9683D19252BF3DF4ADD90A9FF5F90566A311C403
E2F122CBC173598A0B0ACFCBC9B13B598B35E9C4EB5509D14FB3F8DAFCBABB21
7793F4E4958526D861C9D0635AD56B8FEE0103101708B4BF626E9E37F74E94C2
6D6E33833D5819FED3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600
(D:/Research/ICQNM08 Talk/figures/pstricksTOpdf.dvi)
@start /Fa 134[44 3[46 32 1[33 2[42 46 69 3[23 46 42
1[37 46 1[46 42 12[60 31[42 1[42 42 2[23 46[{}19 83.022
/CMR10 rf /Fb 243[38 43 11[{}2 58.1154 /CMMI7 rf /Fc
174[66 81[{}1 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
166 1181 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.25 1. 2.84526 2. Arrow
 EndArrow  } def [ 176.40616 11.38104 5.69052 11.38104  /Lineto /lineto
load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.25 1. 2.84526 2. Arrow
 EndArrow  } def [ 11.38104 142.26303 11.38104 5.69052  /Lineto /lineto
load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial 1574 1201 a Fc(Q)1640 1213 y
Fb(\013)111 16 y Fc(Q)177 28 y Fb(\014)166 1181 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def [ 56.90521 91.04834 56.90521 142.26303  /Lineto
/lineto load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def [ 102.42938 45.52417 56.90521 91.04834  /Lineto
/lineto load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def [ 147.95355 45.52417 102.42938 45.52417  /Lineto
/lineto load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def [ 39.83365 73.97678 39.83365 142.26303  /Lineto
/lineto load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def [ 85.35782 28.4526 39.83365 73.97678  /Lineto
/lineto load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def [ 147.95355 28.4526 85.35782 28.4526  /Lineto
/lineto load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 316 1021 a Fa(Theorem)26
b(4.2)835 123 y(Theorem)h(4.1)166 1181 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.25 1. 2.84526 2. Arrow
 EndArrow  } def [ 62.59573 96.73886 102.42938 119.50095  /Lineto /lineto
load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.25 1. 2.84526 2. Arrow
 EndArrow  } def [ 51.21469 56.90521 45.52417 34.14313  /Lineto /lineto
load def false Line  gsave 0.85358 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.25 1. 2.84526 2. Arrow
 EndArrow  } def [ 150.79881 39.83365 170.71564 62.59573  /Lineto /lineto
load def false Line  gsave 0 0.2 0.8  setrgbcolor fill grestore gsave
0.85358 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0 0 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def [ 48.36943 85.35782 48.36943 142.26303
 /Lineto /lineto load def false Line  gsave 45. rotate 0.85358 SLW
0 0.2 1  setrgbcolor 4.26788 0.0 0.0 LineFill  grestore gsave 0.85358
SLW 0 0 1  setrgbcolor 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0 0 1  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def [ 147.95355 39.83365 91.04834 39.83365
 /Lineto /lineto load def false Line  gsave 45. rotate 0.85358 SLW
0 0.2 1  setrgbcolor 4.26788 0.0 0.0 LineFill  grestore gsave 0.85358
SLW 0 0 1  setrgbcolor 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.85358 SLW 0 0 1  setrgbcolor  0.85358
SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def [ 91.04834
39.83365 91.04834 39.83365 54.05995 48.36943 48.36943 85.35782  false
OpenBezier  0.85358 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def [ 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365
91.04834 39.83365  false OpenBezier  0.85358 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def [ 91.04834 39.83365 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365  false OpenBezier  0.85358
SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def [ 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365  false
OpenBezier  0.85358 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def [ 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365
91.04834 39.83365  false OpenBezier  0.85358 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def [ 91.04834 39.83365 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365  false OpenBezier  0.85358
SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def [ 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365  false
OpenBezier  0.85358 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def [ 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365
91.04834 39.83365  false OpenBezier  0.85358 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def [ 91.04834 39.83365 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365  false OpenBezier  0.85358
SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def [ 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365  false
OpenBezier  0.85358 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def [ 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365
91.04834 39.83365  false OpenBezier  0.85358 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def [ 91.04834 39.83365 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365  false OpenBezier  0.85358
SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def [ 91.04834
39.83365 91.04834 39.83365 91.04834 39.83365 91.04834 39.83365  false
OpenBezier  gsave 0.85358 SLW 0 0 1  setrgbcolor 0 setlinecap stroke
 grestore end
 
@endspecial 1115 611 a(The)h(rate)e(region)h
(b)r(oundary)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
